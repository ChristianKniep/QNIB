From 5cc23932806530ec202fbeba6cf4d881ea71262a Mon Sep 17 00:00:00 2001
From: Christian Kniep <kniep@videobeatz.de>
Date: Thu, 16 Feb 2012 19:01:16 +0100
Subject: [PATCH] QNIB-patch

---
 Makefile.am      |    2 +-
 configure.in     |    2 +-
 qnib/Makefile.am |   34 ++++++
 qnib/libqnib.map |    5 +
 qnib/libqnib.var |    9 ++
 qnib/src/qnib.c  |  308 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 358 insertions(+), 2 deletions(-)
 create mode 100644 qnib/Makefile.am
 create mode 100644 qnib/libqnib.map
 create mode 100644 qnib/libqnib.var
 create mode 100644 qnib/src/qnib.c

diff --git a/Makefile.am b/Makefile.am
index 57492a9..a95a086 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,7 +1,7 @@
 
 # note that order matters: make the libs first then use them
 SUBDIRS = complib libvendor opensm osmtest include $(DEFAULT_EVENT_PLUGIN)
-DIST_SUBDIRS = complib libvendor opensm osmtest include osmeventplugin
+DIST_SUBDIRS = complib libvendor opensm osmtest include osmeventplugin qnib
 
 ACLOCAL_AMFLAGS = -I config
 
diff --git a/configure.in b/configure.in
index 66dbab2..e3b22b1 100644
--- a/configure.in
+++ b/configure.in
@@ -234,4 +234,4 @@ OPENIB_APP_OSMV_CHECK_LIB
 AC_CONFIG_FILES([man/opensm.8 man/torus-2QoS.8 man/torus-2QoS.conf.5 scripts/opensm.init scripts/redhat-opensm.init scripts/sldd.sh])
 
 dnl Create the following Makefiles
-AC_OUTPUT([include/opensm/osm_version.h Makefile include/Makefile complib/Makefile libvendor/Makefile opensm/Makefile osmeventplugin/Makefile osmtest/Makefile opensm.spec])
+AC_OUTPUT([include/opensm/osm_version.h Makefile include/Makefile complib/Makefile libvendor/Makefile opensm/Makefile osmeventplugin/Makefile qnib/Makefile osmtest/Makefile opensm.spec])
diff --git a/qnib/Makefile.am b/qnib/Makefile.am
new file mode 100644
index 0000000..2486599
--- /dev/null
+++ b/qnib/Makefile.am
@@ -0,0 +1,34 @@
+
+INCLUDES = -I$(srcdir)/../include \
+	   -I$(includedir)/infiniband
+
+lib_LTLIBRARIES = libqnib.la
+
+if DEBUG
+DBGFLAGS = -ggdb -D_DEBUG_
+else
+DBGFLAGS = -g
+endif
+
+libqnib_la_CFLAGS = -Wall $(DBGFLAGS) -D_XOPEN_SOURCE=600 -D_BSD_SOURCE=1
+
+if HAVE_LD_VERSION_SCRIPT
+    libqnib_version_script = -Wl,--version-script=$(srcdir)/libqnib.map
+else
+    libqnib_version_script =
+endif
+
+qnib_api_version=$(shell grep LIBVERSION= $(srcdir)/libqnib.ver | sed 's/LIBVERSION=//')
+
+libqnib_la_SOURCES = src/qnib.c
+libqnib_la_LDFLAGS = -version-info $(qnib_api_version) \
+	 -export-dynamic $(libqnib_version_script)
+libqnib_la_LIBADD = -L../complib $(OSMV_LDADD) -losmcomp
+libqnib_la_DEPENDENCIES = $(srcdir)/libqnib.map
+
+libqnibincludedir = $(includedir)/infiniband/complib
+
+libqnibinclude_HEADERS =
+
+# headers are distributed as part of the include dir
+EXTRA_DIST = $(srcdir)/libqnib.map $(srcdir)/libqnib.ver
diff --git a/qnib/libqnib.map b/qnib/libqnib.map
new file mode 100644
index 0000000..346d1f3
--- /dev/null
+++ b/qnib/libqnib.map
@@ -0,0 +1,5 @@
+OSMPMDB_1.0 {
+	global:
+	osm_event_plugin;
+	local: *;
+};
diff --git a/qnib/libqnib.var b/qnib/libqnib.var
new file mode 100644
index 0000000..777bf15
--- /dev/null
+++ b/qnib/libqnib.var
@@ -0,0 +1,9 @@
+# In this file we track the current API version
+# of the vendor interface (and libraries)
+# The version is built of the following
+# tree numbers:
+# API_REV:RUNNING_REV:AGE
+# API_REV - advance on any added API
+# RUNNING_REV - advance any change to the vendor files
+# AGE - number of backward versions the API still supports
+LIBVERSION=1:2:0
diff --git a/qnib/src/qnib.c b/qnib/src/qnib.c
new file mode 100644
index 0000000..73baea2
--- /dev/null
+++ b/qnib/src/qnib.c
@@ -0,0 +1,308 @@
+/*
+ * Copyright (c) 2008 Voltaire, Inc. All rights reserved.
+ * Copyright (c) 2007 The Regents of the University of California.
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the
+ * OpenIB.org BSD license below:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      - Redistributions of source code must retain the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer.
+ *
+ *      - Redistributions in binary form must reproduce the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer in the documentation and/or other materials
+ *        provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ */
+
+#if HAVE_CONFIG_H
+#  include <config.h>
+#endif				/* HAVE_CONFIG_H */
+
+#include <errno.h>
+#include <string.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <time.h>
+#include <dlfcn.h>
+#include <stdint.h>
+#include <complib/cl_qmap.h>
+#include <complib/cl_passivelock.h>
+#include <opensm/osm_version.h>
+#include <opensm/osm_opensm.h>
+#include <opensm/osm_log.h>
+
+#include <libpq-fe.h>
+/**
+ * SQL Foo
+ */
+void
+exit_nicely(PGconn *conn)
+{
+    PQfinish(conn);
+    exit(1);
+}
+
+
+/** =========================================================================
+ * This is a simple example plugin which logs some of the events the OSM
+ * generates to this interface.
+ */
+#define SAMPLE_PLUGIN_OUTPUT_FILE "/tmp/osm_sample_event_plugin_output"
+typedef struct _log_events {
+	FILE *log_file;
+	osm_log_t *osmlog;
+} _log_events_t;
+
+/** =========================================================================
+ */
+static void *construct(osm_opensm_t *osm)
+{
+	_log_events_t *log = malloc(sizeof(*log));
+	if (!log)
+		return (NULL);
+
+	log->log_file = fopen(SAMPLE_PLUGIN_OUTPUT_FILE, "a+");
+
+	if (!(log->log_file)) {
+		osm_log(&osm->log, OSM_LOG_ERROR,
+			"Sample Event Plugin: Failed to open output file \"%s\"\n",
+			SAMPLE_PLUGIN_OUTPUT_FILE);
+		free(log);
+		return (NULL);
+	}
+
+	log->osmlog = &osm->log;
+	return ((void *)log);
+}
+
+/** =========================================================================
+ */
+static void destroy(void *_log)
+{
+	_log_events_t *log = (_log_events_t *) _log;
+	fclose(log->log_file);
+	free(log);
+}
+
+/** =========================================================================
+ */
+static void handle_port_counter(_log_events_t * log, osm_epi_pe_event_t * pc)
+{
+    /* SQL-Connection start */
+    const char *conninfo;
+    static PGconn     *conn = 0;
+    PGresult   *res;
+
+    conninfo = "dbname = qnib user = postgres";
+
+    // Make a connection to the database 
+    if (conn==0) {
+	conn = PQconnectdb(conninfo);
+    }
+    // Check to see that the backend connection was successfully made 
+    if (PQstatus(conn) != CONNECTION_OK) {
+        fprintf(stderr, "Connection to database failed: %s",
+                PQerrorMessage(conn));
+        //exit_nicely(conn);
+	PQfinish(conn);
+	conn = PQconnectdb(conninfo);
+        if (PQstatus(conn) != CONNECTION_OK) {
+            fprintf(stderr, "Failed to reconnect, abort!: %s",
+                PQerrorMessage(conn));
+	    exit_nicely(conn);
+	}
+    }
+    // SQL-Connect end 
+    unsigned char str[1024];
+    /** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+     *  Die Werte sind nicht pro Sekunde!!
+     *  Kommt auf das Interval der Auswertung an
+     * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+     */
+	if (pc->symbol_err_cnt > 0
+	    || pc->xmit_discards > 0
+	    || pc->vl15_dropped > 0
+		|| pc->link_err_recover > 0
+	    || pc->link_downed > 0) {
+		sprintf(str,"SELECT * FROM osmInAllErrCnt('%" PRIx64 "', %d, %ld, %ld, %ld, %ld, %ld);\n",
+			pc->port_id.node_guid, pc->port_id.port_num, pc->time_diff_s,
+			pc->symbol_err_cnt, pc->xmit_discards, pc->vl15_dropped,
+			pc->link_downed);
+		res = PQexec(conn, str);
+	//fprintf(log->log_file,str);
+		}
+	/*
+	if (pc->symbol_err_cnt > 0
+	    || pc->link_err_recover > 0
+	    || pc->link_downed > 0
+	    || pc->rcv_err > 0
+	    || pc->rcv_rem_phys_err > 0
+	    || pc->rcv_switch_relay_err > 0
+	    || pc->xmit_discards > 0
+	    || pc->xmit_constraint_err > 0
+	    || pc->rcv_constraint_err > 0
+	    || pc->link_integrity > 0
+	    || pc->buffer_overrun > 0 || pc->vl15_dropped > 0) {
+		fprintf(log->log_file,
+			"Port counter errors for node 0x%" PRIx64
+			" (%s) port %d\n", pc->port_id.node_guid,
+			pc->port_id.node_name, pc->port_id.port_num);
+	}
+	*/
+}
+
+/** =========================================================================
+ */
+static void
+handle_port_counter_ext(_log_events_t * log, osm_epi_dc_event_t * epc)
+{
+    // SQL-Connection start 
+    const char *conninfo;
+    static PGconn     *conn = 0;
+    PGresult   *res;
+
+    conninfo = "dbname = qnib user = postgres";
+
+    // Make a connection to the database 
+    if (conn==0) {
+	conn = PQconnectdb(conninfo);
+    }
+    // Check to see that the backend connection was successfully made 
+    if (PQstatus(conn) != CONNECTION_OK) {
+        fprintf(stderr, "Connection to database failed: %s",
+                PQerrorMessage(conn));
+        //exit_nicely(conn);
+		PQfinish(conn);
+		conn = PQconnectdb(conninfo);
+        if (PQstatus(conn) != CONNECTION_OK) {
+            fprintf(stderr, "Failed to reconnect, abort!: %s",
+                PQerrorMessage(conn));
+	    exit_nicely(conn);
+		}
+    }
+    // SQL-Connect end 
+    unsigned char str[1024];
+    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+    //  Die Werte sind nicht pro Sekunde!!
+    //  Kommt auf das Interval der Auswertung an
+    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+	
+	sprintf(str,"SELECT * FROM osmInAllPerfCnt('%" PRIx64 "', %d, %ld, %ld, %ld, %ld, %ld);\n",
+		epc->port_id.node_guid, epc->port_id.port_num, epc->time_diff_s,
+		epc->xmit_data, epc->rcv_data, epc->xmit_pkts, epc->rcv_pkts);
+	res = PQexec(conn, str);
+	//fprintf(log->log_file,str);
+	
+	
+    /*
+	unsigned char str2[1024];
+    sprintf(str2,"GUID: %" PRIx64 " / Port: %d  | xmit_data: %lu | xmit_pkts: %lu | xmit_wait: %lu | unic_xmit_pkts: %lu | unic_rcv_pkts: %lu | multic_xmit_pkts: %lu | multic_rcv_pkts: %lu | time_diff_s: %lu \n",
+	    epc->port_id.node_guid, 
+	    epc->port_id.port_num, 
+	    epc->xmit_data/250000, //aus 4Byte-Zaehler machen wir MB
+	    epc->xmit_pkts, 
+	    //epc->xmit_wait,
+	    epc->unicast_xmit_pkts,
+	    epc->unicast_rcv_pkts,
+	    epc->multicast_xmit_pkts,
+	    epc->multicast_rcv_pkts,
+	    epc->time_diff_s
+	    );
+	*/
+    //fprintf(log->log_file,str2);
+	
+}
+
+/** =========================================================================
+ */
+static void handle_port_select(_log_events_t * log, osm_epi_ps_event_t * ps)
+{
+	if (ps->xmit_wait > 0) {
+		fprintf(log->log_file,
+			"Port select Xmit Wait counts for node 0x%" PRIx64
+			" (%s) port %d\n", ps->port_id.node_guid,
+			ps->port_id.node_name, ps->port_id.port_num);
+	}
+}
+
+/** =========================================================================
+ */
+static void handle_trap_event(_log_events_t *log, ib_mad_notice_attr_t *p_ntc)
+{
+	if (ib_notice_is_generic(p_ntc)) {
+		fprintf(log->log_file,
+			"Generic trap type %d; event %d; from LID 0x%x\n",
+			ib_notice_get_type(p_ntc),
+			cl_ntoh16(p_ntc->g_or_v.generic.trap_num),
+			cl_ntoh16(p_ntc->issuer_lid));
+	} else {
+		fprintf(log->log_file,
+			"Vendor trap type %d; from LID 0x%x\n",
+			ib_notice_get_type(p_ntc),
+			cl_ntoh16(p_ntc->issuer_lid));
+	}
+
+}
+
+/** =========================================================================
+ */
+static void report(void *_log, osm_epi_event_id_t event_id, void *event_data)
+{
+	_log_events_t *log = (_log_events_t *) _log;
+
+	switch (event_id) {
+	case OSM_EVENT_ID_PORT_ERRORS:
+		handle_port_counter(log, (osm_epi_pe_event_t *) event_data);
+		break;
+	case OSM_EVENT_ID_PORT_DATA_COUNTERS:
+		handle_port_counter_ext(log, (osm_epi_dc_event_t *) event_data);
+		break;
+	case OSM_EVENT_ID_PORT_SELECT:
+		handle_port_select(log, (osm_epi_ps_event_t *) event_data);
+		break;
+	case OSM_EVENT_ID_TRAP:
+		handle_trap_event(log, (ib_mad_notice_attr_t *) event_data);
+		break;
+	case OSM_EVENT_ID_SUBNET_UP:
+		fprintf(log->log_file, "Subnet up reported\n");
+		break;
+	case OSM_EVENT_ID_MAX:
+	default:
+		osm_log(log->osmlog, OSM_LOG_ERROR,
+			"Unknown event (%d) reported to plugin\n", event_id);
+	}
+	fflush(log->log_file);
+}
+
+/** =========================================================================
+ * Define the object symbol for loading
+ */
+
+#if OSM_EVENT_PLUGIN_INTERFACE_VER != 2
+#error OpenSM plugin interface version missmatch
+#endif
+
+osm_event_plugin_t osm_event_plugin = {
+      osm_version:OSM_VERSION,
+      create:construct,
+      delete:destroy,
+      report:report
+};
-- 
1.7.1

